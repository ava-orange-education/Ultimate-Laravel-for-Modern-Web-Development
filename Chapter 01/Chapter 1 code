<?php

namespace Database\Seeders;
use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;

class DatabaseSeeder extends Seeder
{
    /**
     * Run the database seeders.
     */
    public function run(): void
    {
        DB::table('plants')->insert([
            'name' => Str::random(10),
            'species' => Str::random(10)
        ]);
    }
}

#--------------------------------------------------------------------------------------------------------------------------------


/lang
    /en
        messages.php
    /es
        messages.php

#--------------------------------------------------------------------------------------------------------------------------------


/lang
    en.json
    es.json

#--------------------------------------------------------------------------------------------------------------------------------

use Illuminate\Support\Facades\App;

Route::get('/greeting/{locale}', function (string $locale) {
    if (! in_array($locale, ['en', 'es'])) {
        abort(400);
    }

    App::setLocale($locale);

    // ...
});

#--------------------------------------------------------------------------------------------------------------------------------
'falback_locale' => '<language>'

#--------------------------------------------------------------------------------------------------------------------------------
'falback_locale' => 'en'

#--------------------------------------------------------------------------------------------------------------------------------

use Illuminate\Support\Facades\App;

$locale = App::currentLocale();

if (App::isLocale('es')) {
    // ...
}

#--------------------------------------------------------------------------------------------------------------------------------

"minimum-stability": "stable",

#--------------------------------------------------------------------------------------------------------------------------------
app()->usePublicPath(__DIR__.'/public');

Redis Cache Tags

#--------------------------------------------------------------------------------------------------------------------------------

protected $casts = [
	'deployed_at' => 'datetime',
];
#--------------------------------------------------------------------------------------------------------------------------------
/bin/bash -c
"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

#--------------------------------------------------------------------------------------------------------------------------------

brew install php

#--------------------------------------------------------------------------------------------------------------------------------

php -v

#--------------------------------------------------------------------------------------------------------------------------------

brew install composer

#--------------------------------------------------------------------------------------------------------------------------------

brew install composer@<versionNumber>

#--------------------------------------------------------------------------------------------------------------------------------
sudo php -r "copy('https://getcomposer.org/installer','composer-setup.php');"

#--------------------------------------------------------------------------------------------------------------------------------
php -r "if (hash_file('sha384', 'composer setup.php') === '756890a4488ce9024fc62c56153228907f1545c228516cbf63f885e036d37e9a59d27d63f46af1d4d07ee0f76181c7d3') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); }"

#--------------------------------------------------------------------------------------------------------------------------------

php composer-setup.php

#--------------------------------------------------------------------------------------------------------------------------------

sudo mv composer.phar /usr/local/bin/composer

#--------------------------------------------------------------------------------------------------------------------------------

composer

#--------------------------------------------------------------------------------------------------------------------------------

composer

#--------------------------------------------------------------------------------------------------------------------------------

composer global require laravel/installer

#--------------------------------------------------------------------------------------------------------------------------------

laravel new directoryName

#--------------------------------------------------------------------------------------------------------------------------------
composer global about

#--------------------------------------------------------------------------------------------------------------------------------


composer create-project --prefer-dist laravel/laravel:^10.0 blog

#--------------------------------------------------------------------------------------------------------------------------------

php artisan serve

#--------------------------------------------------------------------------------------------------------------------------------

php artisan –version

#--------------------------------------------------------------------------------------------------------------------------------
php artisan list

#--------------------------------------------------------------------------------------------------------------------------------
php artisan help migrate

#--------------------------------------------------------------------------------------------------------------------------------
* * * * * php /path/to/artisan schedule:run 1>> /dev/null 2>&1

#--------------------------------------------------------------------------------------------------------------------------------

$schedule->command('test')->everyFiveMinutes();

#--------------------------------------------------------------------------------------------------------------------------------

$schedule->command('test')->everyTenMinutes();

#--------------------------------------------------------------------------------------------------------------------------------

$schedule->command('test')->daily();

#--------------------------------------------------------------------------------------------------------------------------------

$schedule->command('test')->dailyAt(‘10:00’);

#--------------------------------------------------------------------------------------------------------------------------------
mondays()
tuesdays()
wednesdays()
thursdays()
fridays()
saturdays()
sundays()

#--------------------------------------------------------------------------------------------------------------------------------
weekdays()

#--------------------------------------------------------------------------------------------------------------------------------

$schedule->command('test')->weekly();

#--------------------------------------------------------------------------------------------------------------------------------

$schedule->command('test')->weeklyOn(1,‘10:00’);

#--------------------------------------------------------------------------------------------------------------------------------

$schedule->command('test')->cron('* * * * *');

#--------------------------------------------------------------------------------------------------------------------------------
$schedule->command('test')->withoutOverlapping();

#--------------------------------------------------------------------------------------------------------------------------------

Illuminate\Contracts\Console\Isolatable

#--------------------------------------------------------------------------------------------------------------------------------

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Contracts\Console\Isolatable;

class SendNotifications extends Command implements Isolatable
{
    // ...
}

#--------------------------------------------------------------------------------------------------------------------------------

--isolated=12

#--------------------------------------------------------------------------------------------------------------------------------
use DateTimeInterface;
use DateInterval;

public function isolationLockExpiresAt(): DateTimeInterface|DateInterval
{
    return now()->addMinutes(10);
}
