
php artisan make:test SampleTest

#--------------------------------------------------------------------------------------------------------------------------------

php artisan make:test SampleTest –unit

#--------------------------------------------------------------------------------------------------------------------------------

php artisan make:test SampleTest --pest
php artisan make:test SampleTest --unit --pest

#--------------------------------------------------------------------------------------------------------------------------------

<?php

namespace Tests\Unit;

use PHPUnit\Framework\TestCase;

class Sampletest extends TestCase
{
    public function test_basic_test(): void
    {
        $this->assertTrue(true);

        //Logic of the test case

    }
}
#--------------------------------------------------------------------------------------------------------------------------------

./vendor/bin/phpunit

#--------------------------------------------------------------------------------------------------------------------------------

php artisan test

#--------------------------------------------------------------------------------------------------------------------------------

php artisan test --testsuite=Feature --stop-on-failure
#--------------------------------------------------------------------------------------------------------------------------------

php artisan test –-parallel
#--------------------------------------------------------------------------------------------------------------------------------

php artisan test --parallel --processes=2
#--------------------------------------------------------------------------------------------------------------------------------

php artisan test --parallel --recreate-databases
#--------------------------------------------------------------------------------------------------------------------------------

<?php

namespace App\Providers;

use Illuminate\Support\Facades\Artisan;
use Illuminate\Support\Facades\ParallelTesting;
use Illuminate\Support\ServiceProvider;
use PHPUnit\Framework\TestCase;

class AppServiceProvider extends ServiceProvider
{

    public function boot(): void
    {
        ParallelTesting::setUpProcess(function (int $token) {

            // Set Up Logic

        });

        ParallelTesting::setUpTestCase(function (int $token, TestCase $testCase) {

            // Set Up Case Logic

        });


        ParallelTesting::setUpTestDatabase(function (string $database, int $token) {
            Artisan::call('db:seed');

            // Logic

        });

        ParallelTesting::tearDownTestCase(function (int $token, TestCase $testCase) {

            // Tear Down Logic

        });

        ParallelTesting::tearDownProcess(function (int $token) {

            // Tear Down Process Logic

        });
    }
}

#--------------------------------------------------------------------------------------------------------------------------------

$token = ParallelTesting::token();
#--------------------------------------------------------------------------------------------------------------------------------

php artisan test --coverage

#--------------------------------------------------------------------------------------------------------------------------------
php artisan test --coverage --min=80.3
#--------------------------------------------------------------------------------------------------------------------------------

php artisan test -–profile
#--------------------------------------------------------------------------------------------------------------------------------
<?php

namespace Tests\Feature;

use Tests\TestCase;

class ExampleTest extends TestCase
{

    public function test_the_application_returns_a_successful_response(): void
    {
        $response = $this->get('/');

        $response->assertStatus(200);
    }
}
#--------------------------------------------------------------------------------------------------------------------------------

<?php

namespace Tests\Feature;

use Tests\TestCase;

class ExampleTest extends TestCase
{

    public function basicRequest(): void
    {
        $response = $this->get('/');

        $response->assertStatus(200);
    }
}
#--------------------------------------------------------------------------------------------------------------------------------

<?php

namespace Tests\Feature;

use Tests\TestCase;

class ExampleTest extends TestCase
{

    public function exampleSample(): void
    {
        $response = $this->withHeaders([

            'X-Header' => 'Value',

        ])->post('/user', ['name' => 'ABC']);

        $response->assertStatus(201);
    }
}
#--------------------------------------------------------------------------------------------------------------------------------

<?php

namespace Tests\Feature;

use Tests\TestCase;

class ExampleTest extends TestCase
{
    public function exampleFunctionCookies(): void
    {
        $response = $this->withCookie('color', 'red')->get('/');

        $response = $this->withCookies([

            'color' => 'red',
            'name' => 'ABC',

        ])->get('/');
    }
}
#--------------------------------------------------------------------------------------------------------------------------------

<?php

namespace Tests\Feature;

use Tests\TestCase;

class ExampleTest extends TestCase
{
    public function exampleSessionInteraction(): void
    {

        $response = $this->withSession(['banned' => false])->get('/');

    }
}

#--------------------------------------------------------------------------------------------------------------------------------

<?php

namespace Tests\Feature;

use App\Models\User;
use Tests\TestCase;

class ExampleTest extends TestCase
{

    public function exampleAuth(): void
    {
        $user = User::factory()->create();

        $response = $this->actingAs($user)

                         ->withSession(['banned' => false])

                         ->get('/');
    }

}

#--------------------------------------------------------------------------------------------------------------------------------

$this->actingAs($user, 'web')
#--------------------------------------------------------------------------------------------------------------------------------

<?php

namespace Tests\Feature;

use Tests\TestCase;

class ExampleTest extends TestCase
{

    public function exampleTest(): void
    {
        $response = $this->get('/');

        $response->dumpHeaders();

        $response->dumpSession();

        $response->dump();

    }

}

#--------------------------------------------------------------------------------------------------------------------------------

<?php

namespace Tests\Feature;

use Tests\TestCase;

class ExampleTest extends TestCase
{

    public function exampleTest(): void
    {
        $response = $this->get('/');

        $response->ddHeaders();

        $response->ddSession();

        $response->dd();

    }

}
#--------------------------------------------------------------------------------------------------------------------------------

$response = $this->withoutExceptionHandling()->get('/');

#--------------------------------------------------------------------------------------------------------------------------------

$response = $this->withoutDeprecationHandling()->get('/');

#--------------------------------------------------------------------------------------------------------------------------------

$this->assertThrows(

    fn () => (new ProcessOrder)->execute(),

    OrderInvalid::class

);
#--------------------------------------------------------------------------------------------------------------------------------

<?php

namespace Tests\Feature;

use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Storage;
use Tests\TestCase;

class ExampleTest extends TestCase
{
    public function testUpload(): void
    {
        Storage::fake('cat');

        $file = UploadedFile::fake()->image('cat.jpg');

        $response = $this->post('/cat', [

            'cat' => $file,

        ]);

        Storage::disk('cats')->assertExists($file->hashName());
    }

}
#--------------------------------------------------------------------------------------------------------------------------------

Storage::fake('cats');

// Application Logic

Storage::disk('cats')->assertMissing('missing.jpg');

#--------------------------------------------------------------------------------------------------------------------------------

UploadedFile::fake()->image('cat.jpg', $width, $height)->size(100);

#--------------------------------------------------------------------------------------------------------------------------------

UploadedFile::fake()->create('document.pdf', $sizeInKilobytes);

#--------------------------------------------------------------------------------------------------------------------------------

UploadedFile::fake()->create(

    'document.pdf', $sizeInKilobytes, 'application/pdf'

);
#--------------------------------------------------------------------------------------------------------------------------------

xdebug.client_host = 192.168.10.1
xdebug.mode = debug
xdebug.start_with_request = yes

#--------------------------------------------------------------------------------------------------------------------------------

xphp /path/to/script
