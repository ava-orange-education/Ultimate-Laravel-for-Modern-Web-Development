use App\Http\Resources\UserResource;
use App\Models\User;


Route::get('/users', function () {
    return UserResource::collection(User::all());

});
#--------------------------------------------------------------------------------------------------------------------------------

php artisan make:resource UserCollection
#--------------------------------------------------------------------------------------------------------------------------------

<?php

namespace App\Http\Resources;

use Illuminate\Http\Request;
use Illuminate\Http\Resources\Json\ResourceCollection;

class UserCollection extends ResourceCollection
{
    /**
     * Transform the resource collection into an array.
     *
     * @return array<int|string, mixed>
     */

    public function toArray(Request $request): array
    {
        return [

            'data' => $this->collection,

            'links' => [
                'self' => 'link-value',
            ],

        ];
    }
}
#--------------------------------------------------------------------------------------------------------------------------------

use App\Http\Resources\UserCollection;
use App\Models\User;

Route::get('/users', function () {

    return new UserCollection(User::all());

});

#--------------------------------------------------------------------------------------------------------------------------------

<?php

namespace App\Http\Resources;

use Illuminate\Http\Resources\Json\JsonResource;

class UserResource extends JsonResource
{
    /**
     * Indicates if the resource's collection keys should be preserved.
     *
     * @var bool
     */

    public $preserveKeys = true;
}

#--------------------------------------------------------------------------------------------------------------------------------

use App\Http\Resources\UserResource;
use App\Models\User;

Route::get('/users', function () {

    return UserResource::collection(User::all()->keyBy->id);

});
#--------------------------------------------------------------------------------------------------------------------------------

<?php

namespace App\Http\Resources;

use Illuminate\Http\Resources\Json\ResourceCollection;

class UserCollection extends ResourceCollection
{

    public $collects = Member::class;
}
#--------------------------------------------------------------------------------------------------------------------------------
<?php

namespace App\Http\Resources;

use Illuminate\Http\Request;
use Illuminate\Http\Resources\Json\JsonResource;

class UserResource extends JsonResource
{

    public function toArray(Request $request): array
    {
        return [

            'id' => $this->id,
            'name' => $this->name,
            'city' => $this->city,
            'created_at' => $this->created_at,
            'updated_at' => $this->updated_at,

        ];
    }
}

#--------------------------------------------------------------------------------------------------------------------------------

use App\Http\Resources\UserResource;
use App\Models\User;

Route::get('/user/{id}', function (string $id) {

    return new UserResource(User::findOrFail($id));

});
#--------------------------------------------------------------------------------------------------------------------------------

use App\Http\Resources\PostResource;
use Illuminate\Http\Request;


public function toArray(Request $request): array
{
    return [

        'id' => $this->id,
        'name' => $this->name,
        'city' => $this->city,
        'posts' => PostResource::collection($this->posts),
        'created_at' => $this->created_at,
        'updated_at' => $this->updated_at,

    ];
}
#--------------------------------------------------------------------------------------------------------------------------------
{
    "data": [
        {
            "id": 1,
            "name": "Eladio Schroeder Sr.",
            "city": "NYC"
        },
        {
            "id": 2,
            "name": "Liliana Mayert",
            "city": "PUNE"
        }
    ]
}

#--------------------------------------------------------------------------------------------------------------------------------
<?php

namespace App\Http\Resources;

use Illuminate\Http\Resources\Json\JsonResource;

class UserResource extends JsonResource
{

    public static $wrap = 'user';
}

#--------------------------------------------------------------------------------------------------------------------------------

<?php

namespace App\Providers;

use Illuminate\Http\Resources\Json\JsonResource;
use Illuminate\Support\ServiceProvider;

class AppServiceProvider extends ServiceProvider
{

    public function register(): void
    {

        // Register Logic

    }


    public function boot(): void
    {
        JsonResource::withoutWrapping();
    }
}
#--------------------------------------------------------------------------------------------------------------------------------

use App\Http\Resources\UserCollection;
use App\Models\User;

Route::get('/users', function () {

    return new UserCollection(User::paginate());

});

#--------------------------------------------------------------------------------------------------------------------------------

{
    "data": [
        {
            "id": 1,
            "name": "ABC",
            "city": "PUNE"
        },
        {
            "id": 2,
            "name": "PQR",
            "email": "SEATTLE"
        }
    ],
    "links":{
        "first": "http://example.com/users?page=1",
        "last": "http://example.com/users?page=1",
        "prev": null,
        "next": null
    },
    "meta":{
        "current_page": 1,
        "from": 1,
        "last_page": 1,
        "path": "http://example.com/users",
        "per_page": 12,
        "to": 10,
        "total": 10
    }
}
#--------------------------------------------------------------------------------------------------------------------------------

public function paginationInformation($request, $paginated, $default)
{
    $default['links']['custom'] = 'https://example.com';

    return $default;
}
#--------------------------------------------------------------------------------------------------------------------------------

use App\Http\Resources\PostResource;


public function toArray(Request $request): array
{
    return [

        'id' => $this->id,
        'name' => $this->name,
        'city' => $this->city,
        'posts' => PostResource::collection($this->whenLoaded('posts')),
        'created_at' => $this->created_at,
        'updated_at' => $this->updated_at,

    ];
}
#--------------------------------------------------------------------------------------------------------------------------------

new UserResource($user->loadCount('posts'));

#--------------------------------------------------------------------------------------------------------------------------------

public function toArray(Request $request): array
{
    return [

        'id' => $this->id,
        'name' => $this->name,
        'city' => $this->city,
        'posts_count' => $this->whenCounted('posts'),
        'created_at' => $this->created_at,
        'updated_at' => $this->updated_at,

    ];
}

#--------------------------------------------------------------------------------------------------------------------------------


use App\Http\Resources\UserResource;
use App\Models\User;

Route::get('/user/{id}', function (string $id) {

    return new UserResource(User::findOrFail($id));

});

#--------------------------------------------------------------------------------------------------------------------------------

use App\Http\Resources\UserResource;
use App\Models\User;

Route::get('/user', function () {

    return (new UserResource(User::find(1)))

                ->response()

                ->header('X-Value', 'True');

});
#--------------------------------------------------------------------------------------------------------------------------------
<?php

namespace App\Http\Resources;

use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Http\Resources\Json\JsonResource;

class UserResource extends JsonResource
{

    public function toArray(Request $request): array
    {
        return [
            'id' => $this->id,
        ];
    }


    public function withResponse(Request $request, JsonResponse $response): void
    {
        $response->header('the value is', 'True');
    }
}
#--------------------------------------------------------------------------------------------------------------------------------

composer require laravel/passport

#--------------------------------------------------------------------------------------------------------------------------------

php artisan migrate

#--------------------------------------------------------------------------------------------------------------------------------

php artisan passport:install

#--------------------------------------------------------------------------------------------------------------------------------

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Passport\HasApiTokens;

class Employee extends Authenticatable
{
    use HasApiTokens, HasFactory, Notifiable;
}

#--------------------------------------------------------------------------------------------------------------------------------

Configuration

#--------------------------------------------------------------------------------------------------------------------------------

use Laravel\Passport\Passport;

Passport::hashClientSecrets();

#--------------------------------------------------------------------------------------------------------------------------------

public function boot(): void
{
    Passport::tokensExpireIn(now()->addDays(15));
    Passport::refreshTokensExpireIn(now()->addDays(30));
    Passport::personalAccessTokensExpireIn(now()->addMonths(6));
}
#--------------------------------------------------------------------------------------------------------------------------------

use Laravel\Passport\Client as PassportClient;

class Client extends PassportClient
{
    // Code Logic
}

#--------------------------------------------------------------------------------------------------------------------------------
use App\Models\Passport\AuthCode;
use App\Models\Passport\Client;
use App\Models\Passport\PersonalAccessClient;
use App\Models\Passport\RefreshToken;
use App\Models\Passport\Token;

public function boot(): void
{
    Passport::useTokenModel(Token::class);
    Passport::useRefreshTokenModel(RefreshToken::class);
    Passport::useAuthCodeModel(AuthCode::class);
    Passport::useClientModel(Client::class);
    Passport::usePersonalAccessClientModel(PersonalAccessClient::class);
}
#--------------------------------------------------------------------------------------------------------------------------------

use Laravel\Passport\Passport;

public function register(): void
{
    Passport::ignoreRoutes();
}
#--------------------------------------------------------------------------------------------------------------------------------

Route::group([

    'as' => 'passport.',

    'prefix' => config('passport.path', 'oauth'),

    'namespace' => '\Laravel\Passport\Http\Controllers',

], function () {
    // Route Logic
});
#--------------------------------------------------------------------------------------------------------------------------------

Passport::client Command

#--------------------------------------------------------------------------------------------------------------------------------

php artisan passport:client

#--------------------------------------------------------------------------------------------------------------------------------


GET /oauth/clients

#--------------------------------------------------------------------------------------------------------------------------------

axios.get('/oauth/clients')
    .then(response => {
        console.log(response.data);
});

#--------------------------------------------------------------------------------------------------------------------------------

POST /oauth/clients
#--------------------------------------------------------------------------------------------------------------------------------

const data = {
    name: 'ABC',
    redirect: 'http://example1.com/callback'
};
#--------------------------------------------------------------------------------------------------------------------------------

axios.post('/oauth/clients', data)
    .then(response => {
        console.log(response.data);
    })
    .catch (response => {
        // Error Handling Logic
    });

#--------------------------------------------------------------------------------------------------------------------------------

PUT /oauth/clients/{cliend-id}

#--------------------------------------------------------------------------------------------------------------------------------

const data = {
    name: 'ABC',
    redirect: 'http://example1.com/callback'
};
#--------------------------------------------------------------------------------------------------------------------------------

axios.put('/oauth/clients/' + clientId, data)
    .then(response => {
        console.log(response.data);
    })
    .catch (response => {
        // Error Handling Logic
    });

    #--------------------------------------------------------------------------------------------------------------------------------

DELETE /oauth/clients/{client-id}

#--------------------------------------------------------------------------------------------------------------------------------

axios.delete('/oauth/clients/' + clientId)
    .then(response => {
        // Code Logic
    });

#--------------------------------------------------------------------------------------------------------------------------------

Route::get('/user', function () {
    // Code Logic
})->middleware('auth:api');

#--------------------------------------------------------------------------------------------------------------------------------

'api' => [
    'driver' => 'passport',
    'provider' => 'users',
],

'api-customers' => [
    'driver' => 'passport',
    'provider' => 'customers',
],

#--------------------------------------------------------------------------------------------------------------------------------

Route::get('/customer', function () {
    // Code Logic
})->middleware('auth:api-customers');

#--------------------------------------------------------------------------------------------------------------------------------

use Illuminate\Support\Facades\Http;

$response = Http::withHeaders([

    'Accept' => 'application/json',
    'Authorization' => 'Bearer '.$accessToken,

])->get('https://passport-app.test/api/user');

return $response->json();

#--------------------------------------------------------------------------------------------------------------------------------

public function boot(): void
{
    Passport::tokensCan([

        'place-alarm' => 'Place alarm',
        'check-weather' => 'Check weather',

    ]);
}
#--------------------------------------------------------------------------------------------------------------------------------

use Laravel\Passport\Passport;

Passport::tokensCan([
    'place-alarm' => 'Place alarm',
    'check-weather' => 'Check weather',
]);

Passport::setDefaultScope([
    'check-weather',
    'place-alarm',
]);
#--------------------------------------------------------------------------------------------------------------------------------

Route::get('/redirect', function () {
    $query = http_build_query([

        'client_id' => 'client-id',
        'redirect_uri' => 'http://example1.com/callback',
        'response_type' => 'code',
        'scope' => 'place-alarm check-weather',

    ]);

    return redirect('http://passport-app.test/oauth/authorize?'.$query);
});
#--------------------------------------------------------------------------------------------------------------------------------

$token = $user->createToken('My Token', ['place-alarm'])->accessToken;
#--------------------------------------------------------------------------------------------------------------------------------

'scopes' => \Laravel\Passport\Http\Middleware\CheckScopes::class,

'scope' => \Laravel\Passport\Http\Middleware\CheckForAnyScope::class,
#--------------------------------------------------------------------------------------------------------------------------------

Route::get('/weather', function () {

	//Code Logic

})->middleware(['auth:api', 'scopes:check-weather,place-alarm']);
#--------------------------------------------------------------------------------------------------------------------------------

Route::get('/orders', function () {

    //Code Logic

})->middleware(['auth:api', 'scope:check-weather,place-alarm']);
#--------------------------------------------------------------------------------------------------------------------------------

use Illuminate\Http\Request;

Route::get('/alarms', function (Request $request) {

    if ($request->user()->tokenCan('place-alarm')) {

        // Code Logic
    }
});
