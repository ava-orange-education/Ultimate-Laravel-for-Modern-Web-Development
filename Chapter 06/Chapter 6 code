
Route::get('/profile', function () {

    // Only authenticated users may access this route

})->middleware('auth.basic');
#--------------------------------------------------------------------------------------------------------------------------------

RewriteCond %{HTTP:Authorization} ^(.+)$
RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]
#--------------------------------------------------------------------------------------------------------------------------------

<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Symfony\Component\HttpFoundation\Response;

class AuthenticateBasicAuth
{
    /**
     * Handle an incoming request.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     */

    public function handle(Request $request, Closure $next): Response
    {
        return Auth::onceBasic() ?: $next($request);
    }

}

#--------------------------------------------------------------------------------------------------------------------------------

Route::get('/api/user', function () {

    // Only authenticated users may access this route

})->middleware(AuthenticateBasicAuth::class);
#--------------------------------------------------------------------------------------------------------------------------------
<?php

namespace App\Providers;

use App\Extensions\TestEmployeeProvider;
use Illuminate\Contracts\Foundation\Application;
use Illuminate\Foundation\Support\Providers\AuthServiceProvider as ServiceProvider;
use Illuminate\Support\Facades\Auth;

class AuthServiceProvider extends ServiceProvider
{
    /**
     * Register any application authentication / authorization services.
     */
    public function boot(): void
    {
        Auth::provider('test', function (Application $app, array $config) {

            // Return an instance of Illuminate\Contracts\Auth\UserProvider

            return new TestEmployeeProvider($app->make('test.connection'));

        });
    }
}
#--------------------------------------------------------------------------------------------------------------------------------

'providers' => [

    'employees' => [

        'driver' => 'test',

    ],

],

#--------------------------------------------------------------------------------------------------------------------------------

'guards' => [

    'web' => [

        'driver' => 'session',
        'provider' => 'employees',

    ],

],
#--------------------------------------------------------------------------------------------------------------------------------

<?php

namespace Illuminate\Contracts\Auth;

interface UserProvider
{

    public function retrieveById($identifier);
    public function retrieveByToken($identifier, $token);
    public function updateRememberToken(Authenticatable $user, $token);
    public function retrieveByCredentials(array $credentials);
    public function validateCredentials(Authenticatable $user, array $credentials);

}
#--------------------------------------------------------------------------------------------------------------------------------

<?php

namespace Illuminate\Contracts\Auth;

interface Authenticatable

{

    public function getAuthIdentifierName();
    public function getAuthIdentifier();
    public function getAuthPassword();
    public function getRememberToken();
    public function setRememberToken($value);
    public function getRememberTokenName();

}
#--------------------------------------------------------------------------------------------------------------------------------

use Illuminate\Http\Request;
use Illuminate\Http\RedirectResponse;
use Illuminate\Support\Facades\Auth;

/**
 * Log the user out of the application.
 */
public function logout(Request $request): RedirectResponse
{
    Auth::logout();

    $request->session()->invalidate();

    $request->session()->regenerateToken();

    return redirect('/home');
}
#--------------------------------------------------------------------------------------------------------------------------------
Route::middleware(['auth', 'auth.session'])->group(function () {

    Route::get('/', function () {

        // Code Logic

    });

});
#--------------------------------------------------------------------------------------------------------------------------------

use Illuminate\Support\Facades\Auth;

Auth::logoutOtherDevices($currentPassword);
#--------------------------------------------------------------------------------------------------------------------------------

Route::get('/confirmPassword', function () {

    return view('auth.confirm-password');

})->middleware('auth')->name('password.confirm');
#--------------------------------------------------------------------------------------------------------------------------------

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Redirect;

Route::post('/confirmPassword', function (Request $request) {

    if (! Hash::check($request->password, $request->user()->password)) {

        return back()->withErrors([
            'password' => ['Incorrect Password']
        ]);
    }

    $request->session()->passwordConfirmed();

    return redirect()->intended();

})->middleware(['auth', 'throttle:6,1']);
#--------------------------------------------------------------------------------------------------------------------------------

<?php

namespace App\Providers;

use App\Services\Auth\JwtGuard;
use Illuminate\Contracts\Foundation\Application;
use Illuminate\Foundation\Support\Providers\AuthServiceProvider as ServiceProvider;
use Illuminate\Support\Facades\Auth;

class AuthServiceProvider extends ServiceProvider
{
    /**
     * Register any application authentication / authorization services.
     */

    public function boot(): void
    {
        Auth::extend('jwt', function (Application $app, string $name, array $config) {

            // Return an instance of Illuminate\Contracts\Auth\Guard

            return new JwtGuard(Auth::createUserProvider($config['provider']));
        });
    }
}
#--------------------------------------------------------------------------------------------------------------------------------
'guards' => [
    'api' => [

        'driver' => 'jwt',
        'provider' => 'users',

    ],
],
#--------------------------------------------------------------------------------------------------------------------------------

use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

/**
 * Register any application authentication / authorization service
 */
public function boot(): void
{
    Auth::viaRequest('customToken', function (Request $request) {

        return Employee::where('token', (string) $request->token)->first();

    });
}

#--------------------------------------------------------------------------------------------------------------------------------

'guards' => [

    'api' => [

        'driver' => 'customToken',

    ],

],
#--------------------------------------------------------------------------------------------------------------------------------

Route::middleware('auth:api')->group(function () {

    // Code Logic

}
#--------------------------------------------------------------------------------------------------------------------------------
Route::middleware(['auth', 'auth.session'])->group(function () {

    Route::get('/', function () {

        // Code Logic

    });

});
#--------------------------------------------------------------------------------------------------------------------------------

use Illuminate\Support\Facades\Auth;

Auth::logoutOtherDevices($currentPassword);
#--------------------------------------------------------------------------------------------------------------------------------

use Illuminate\Support\Facades\Auth;

if (Auth::attempt(['email' => $email, 'password' => $password], $remember)) {

    // The user is saved

}
#--------------------------------------------------------------------------------------------------------------------------------

use Illuminate\Support\Facades\Auth;

if (Auth::viaRemember()) {

    // Code Logic

}
#--------------------------------------------------------------------------------------------------------------------------------
use Illuminate\Support\Facades\Auth;

Auth::login($user);

#--------------------------------------------------------------------------------------------------------------------------------

Auth::login($user, $remember = true);

#--------------------------------------------------------------------------------------------------------------------------------

Auth::guard('admin')->login($user);

#--------------------------------------------------------------------------------------------------------------------------------


Auth::loginUsingId(5);

#--------------------------------------------------------------------------------------------------------------------------------

Auth::loginUsingId(5, $remember = true);

#--------------------------------------------------------------------------------------------------------------------------------

if (Auth::once($credentials)) {

    // Code Logic

}
#--------------------------------------------------------------------------------------------------------------------------------

Route::get('/offices', function () {

    // Only authenticated users logic

})->middleware('auth');
#--------------------------------------------------------------------------------------------------------------------------------

php artisan make:middleware EnsureTokenIsValid
#--------------------------------------------------------------------------------------------------------------------------------

<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Symfony\Component\HttpFoundation\Response;

class EnsureTokenIsValid
{
    /**
     * Handle an incoming request.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     */
    public function handle(Request $request, Closure $next): Response
    {
        if ($request->input('token') !== 'secret-token') {

            return redirect('home');

        }

        return $next($request);
    }
}
#--------------------------------------------------------------------------------------------------------------------------------

<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Symfony\Component\HttpFoundation\Response;

class BeforeMiddleware
{
    public function handle(Request $request, Closure $next): Response
    {
        // Perform action

        return $next($request);
    }
}
#--------------------------------------------------------------------------------------------------------------------------------

<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Symfony\Component\HttpFoundation\Response;

class AfterMiddleware
{
    public function handle(Request $request, Closure $next): Response
    {
        $response = $next($request);

        // Perform action

        return $response;
    }
}
#--------------------------------------------------------------------------------------------------------------------------------

use App\Http\Middleware\Authenticate;

Route::get('/EmployeeProfile', function () {

    // Code Logic

})->middleware(Authenticate::class);

#--------------------------------------------------------------------------------------------------------------------------------

Route::get('/', function () {

    // Code Logic

})->middleware([First::class, Second::class]);

#--------------------------------------------------------------------------------------------------------------------------------

// Within App\Http\Kernel class...

protected $middlewareAliases = [
    'auth' => \App\Http\Middleware\Authenticate::class,

    'auth.basic' => \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,

    'bindings' => \Illuminate\Routing\Middleware\SubstituteBindings::class,

    'cache.headers' => \Illuminate\Http\Middleware\SetCacheHeaders::class,

    'allowed' => \Illuminate\Auth\Middleware\Authorize::class,

    'guest' => \App\Http\Middleware\RedirectIfAuthenticated::class,

    'signed' => \Illuminate\Routing\Middleware\ValidateSignature::class,

    'throttle' => \Illuminate\Routing\Middleware\ThrottleRequests::class,

    'verified' => \Illuminate\Auth\Middleware\EnsureEmailIsVerified::class,

];

#--------------------------------------------------------------------------------------------------------------------------------

Route::get('/EmployeeProfile', function () {

    // Code Logic

})->middleware('auth');
#--------------------------------------------------------------------------------------------------------------------------------

/**
 * The application's route middleware groups.
 *
 * @var array
 */
protected $middlewareGroups = [

    'web' => [

        \App\Http\Middleware\EncryptCookies::class,

        \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,

        \Illuminate\Session\Middleware\StartSession::class,

        \Illuminate\View\Middleware\ShareErrorsFromSession::class,

        \App\Http\Middleware\VerifyCsrfToken::class,

        \Illuminate\Routing\Middleware\SubstituteBindings::class,
    ],

    'api' => [

        \Illuminate\Routing\Middleware\ThrottleRequests::class.':api',

        \Illuminate\Routing\Middleware\SubstituteBindings::class,

    ],
];


#--------------------------------------------------------------------------------------------------------------------------------
Route::get('/', function () {

    // Code Logic

})->middleware('web');
#--------------------------------------------------------------------------------------------------------------------------------

Route::middleware(['web'])->group(function () {

     // Code Logic

});

#--------------------------------------------------------------------------------------------------------------------------------

/**
 * The priority-sorted list of middleware.
 *
 * This forces non-global middleware to always be in the given order.
 *
 * @var string[]
 */
protected $middlewarePriority = [

    \Illuminate\Foundation\Http\Middleware\HandlePrecognitiveRequests::class,

    \Illuminate\Cookie\Middleware\EncryptCookies::class,

    \Illuminate\Session\Middleware\StartSession::class,

    \Illuminate\View\Middleware\ShareErrorsFromSession::class,

    \Illuminate\Contracts\Auth\Middleware\AuthenticatesRequests::class,

    \Illuminate\Routing\Middleware\ThrottleRequests::class,

    \Illuminate\Routing\Middleware\ThrottleRequestsWithRedis::class,

    \Illuminate\Contracts\Session\Middleware\AuthenticatesSessions::class,

    \Illuminate\Routing\Middleware\SubstituteBindings::class,

    \Illuminate\Auth\Middleware\Authorize::class,

];
#--------------------------------------------------------------------------------------------------------------------------------

<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Symfony\Component\HttpFoundation\Response;

class EnsureEmployeeHasRole
{
    /**
     * Handle an incoming request.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     */
    public function handle(Request $request, Closure $next, string $role): Response
    {
        if (! $request->employee()->hasRole($role)) {

            // Redirect Logic

        }

        return $next($request);
    }

}
#--------------------------------------------------------------------------------------------------------------------------------

Route::put('/post/{emp_id}', function (string $emp_id) {

    // Code Logic

})->middleware('role:editor')
#--------------------------------------------------------------------------------------------------------------------------------

<?php

namespace Illuminate\Session\Middleware;

use Closure;
use Illuminate\Http\Request;
use Symfony\Component\HttpFoundation\Response;

class TerminatingMiddleware
{

    /**
     * Handle an incoming request.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     */

    public function handle(Request $request, Closure $next): Response
    {
        return $next($request);
    }

    /**
     * Handle tasks after the response has been sent to the browser.
     */

    public function terminate(Request $request, Response $response): void
    {
        // Code Logic for termination
    }
}
#--------------------------------------------------------------------------------------------------------------------------------

use App\Http\Middleware\TerminatingMiddleware;

/**
 * Register any application services of the application Logic
 */

public function register(): void
{
    $this->app->singleton(TerminatingMiddleware::class);
}
